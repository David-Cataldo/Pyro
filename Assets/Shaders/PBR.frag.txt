#version 330 core

out vec4 FragColor;

in vec2 t_Position;
in vec3 FragPos;
in vec3 Normal;

const int MAX_LIGHTS = 50;

uniform int u_numLights;
uniform vec3 u_lightPositions[MAX_LIGHTS];
uniform vec3 u_lightColors[MAX_LIGHTS];

uniform vec3 u_camPos;

const float PI = 3.14159265359;

uniform sampler2D u_albedo;
uniform float u_metallic;
uniform float u_roughness;
uniform float u_ao;


float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a = roughness * roughness;
	float a2 = a * a;
	float NdotH = max(dot(N, H), 0.0);
	float NdotH2 = NdotH * NdotH;
	
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;
	
	return a2 / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = roughness + 1.0;
	float k = (r*r) / 8.0;
	
	float denom = NdotV * (1.0 - k) + k;
	
	return NdotV / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx1 = GeometrySchlickGGX(NdotV, roughness);
	float ggx2 = GeometrySchlickGGX(NdotL, roughness);
	
	return ggx1 * ggx2;
}

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

void main()
{
	vec3 N = normalize(Normal);
	vec3 V = normalize(u_camPos - FragPos);
	
	vec3 F0 = vec3(0.04);
	F0 = mix(F0, texture(u_albedo, t_Position).xyz, u_metallic);
	
	vec3 Lo = vec3(0.0);
	
	for(int i = 0; i < u_numLights; i++)
	{
		vec3 L = normalize(u_lightPositions[i] - FragPos);
		vec3 H = normalize(V + L);
		float distance = length(u_lightPositions[i] - FragPos);
		float attenuation = 1.0 / (distance * distance);
		vec3 radiance = u_lightColors[i] * attenuation;
		
		float NDF = DistributionGGX(N, H, u_roughness);
		float G = GeometrySmith(N, V, L, u_roughness);
		vec3 F = FresnelSchlick(max(dot(H, V), 0.0), F0);
		
		vec3 kS = F;
		vec3 kD = vec3(1.0) - kS;
		kD *= 1.0 - u_metallic;
		
		vec3 numerator = NDF * G * F;
		float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
		vec3 specular = numerator / denominator;
		
		float NdotL = max(dot(N, L), 0.0);
		Lo += (kD * texture(u_albedo, t_Position).xyz / PI + specular) * radiance * NdotL;
	}
	
	vec3 ambient = vec3(0.03) * texture(u_albedo, t_Position).xyz * u_ao;
	vec3 color = ambient + Lo;
	
	color = color / (color + vec3(1.0));
	color = pow(color, vec3(1.0/2.2));
	
	FragColor = vec4(color, 1.0);
}