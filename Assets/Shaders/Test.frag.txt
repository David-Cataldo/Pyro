#version 330 core

const int MAX_LIGHTS = 50;

uniform vec3 u_CameraPos;

uniform int u_NumLights;
uniform vec3 u_LightPos[MAX_LIGHTS];
uniform vec3 u_LightCol[MAX_LIGHTS];
uniform float u_ConstAtt[MAX_LIGHTS];
uniform float u_LinAtt[MAX_LIGHTS];
uniform float u_QuadAtt[MAX_LIGHTS];
uniform float u_DifInt[MAX_LIGHTS];
uniform float u_SpecInt[MAX_LIGHTS];

uniform float u_Shininess;
			
layout(location = 0) out vec4 color;

in vec2 t_Position;
in vec3 FragPos;
in vec3 Normal;

uniform sampler2D tex;



void main()
{
	vec3 totLight = vec3(0.0, 0.0, 0.0);
	for(int i = 0; i < u_NumLights; i++)
	{	
		vec3 curLight = vec3(0.0, 0.0, 0.0);	
		vec3 lightDir = u_LightPos[i] - FragPos;
		float dist = length(lightDir);
		lightDir = normalize(lightDir);
		float diffuse = max(dot(normalize(Normal), lightDir), 0.0);
		curLight += (u_LightCol[i] * diffuse * u_DifInt[i]);
		if(diffuse > 0)
		{
    			vec3 viewDir = normalize(u_CameraPos - FragPos);
			vec3 halfDir = normalize(lightDir + viewDir);
			float spec = pow(max(dot(Normal, halfDir), 0.0), u_Shininess);
			curLight += (u_LightCol[i] * spec * u_SpecInt[i]);
			float att = u_QuadAtt[i] * dist * dist + u_LinAtt[i] * dist + u_ConstAtt[i];
			curLight = curLight / att;
			totLight += curLight;
		}
	}	

	color = texture(tex, t_Position) * vec4(totLight, 1.0);
}